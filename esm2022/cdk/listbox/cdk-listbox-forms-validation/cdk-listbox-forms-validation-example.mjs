import { Component } from '@angular/core';
import { FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { map } from 'rxjs/operators';
import { NgFor, NgIf, AsyncPipe, JsonPipe } from '@angular/common';
import { CdkListbox, CdkOption } from '@angular/cdk/listbox';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/** @title Listbox with forms validation. */
class CdkListboxFormsValidationExample {
    constructor() {
        this.signs = [
            'Rat',
            'Ox',
            'Tiger',
            'Rabbit',
            'Dragon',
            'Snake',
            'Horse',
            'Goat',
            'Monkey',
            'Rooster',
            'Dog',
            'Pig',
        ];
        // #docregion errors
        this.signCtrl = new FormControl([], Validators.required);
        this.invalid = this.signCtrl.valueChanges.pipe(map(() => this.signCtrl.touched && !this.signCtrl.valid));
    }
    getErrors() {
        const errors = [];
        if (this.signCtrl.hasError('required')) {
            errors.push('You must enter your zodiac sign');
        }
        if (this.signCtrl.hasError('cdkListboxUnexpectedMultipleValues')) {
            errors.push('You can only select one zodiac sign');
        }
        if (this.signCtrl.hasError('cdkListboxUnexpectedOptionValues')) {
            const invalidOptions = this.signCtrl.getError('cdkListboxUnexpectedOptionValues').values;
            errors.push(`You entered an invalid zodiac sign: ${invalidOptions[0]}`);
        }
        return errors.length ? errors : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: CdkListboxFormsValidationExample, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: CdkListboxFormsValidationExample, isStandalone: true, selector: "cdk-listbox-forms-validation-example", exportAs: ["cdkListboxFormsValidationExample"], ngImport: i0, template: "<div class=\"example-listbox-container\" [class.example-listbox-invalid]=\"invalid | async\">\n  <label class=\"example-listbox-label\" id=\"example-zodiac-sign-label\">\n    Zodiac Sign\n  </label>\n  <ul cdkListbox\n      [formControl]=\"signCtrl\"\n      aria-labelledby=\"example-zodiac-sign-label\"\n      class=\"example-listbox\">\n    <li *ngFor=\"let sign of signs\"\n        [cdkOption]=\"sign\"\n        class=\"example-option\">\n      {{sign}}\n    </li>\n  </ul>\n</div>\n<div class=\"example-listbox-errors\" *ngIf=\"invalid | async\">\n  <p *ngFor=\"let error of getErrors()\">{{error}}</p>\n</div>\n<p>\n  Your zodiac sign is: <strong>{{signCtrl.value | json}}</strong>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Cat'])\">Set: Cat</button>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Dragon', 'Snake'])\">Set: Dragon, Snake</button>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Cat', 'Rat'])\">Set: Cat, Rat</button>&nbsp;\n  <button (click)=\"signCtrl.setValue([])\">Clear</button>\n</p>\n", styles: [".example-listbox-container {\n  display: block;\n  width: 250px;\n  border: 1px solid black;\n}\n\n.example-listbox-invalid {\n  border-color: red;\n}\n\n.example-listbox-label {\n  display: block;\n  padding: 5px;\n}\n\n.example-listbox-invalid .example-listbox-label {\n  color: red;\n}\n\n.example-listbox {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  height: 200px;\n  overflow: auto;\n}\n\n.example-option {\n  position: relative;\n  padding: 5px 5px 5px 25px;\n}\n\n.example-option[aria-selected='true']::before {\n  content: '';\n  display: block;\n  width: 20px;\n  height: 20px;\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\"><path d=\"m9.55 18-5.7-5.7 1.425-1.425L9.55 15.15l9.175-9.175L20.15 7.4Z\"/></svg>'); /* stylelint-disable-line */\n  background-size: cover;\n  position: absolute;\n  left: 2px;\n}\n\n.example-option:focus {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.example-listbox-errors {\n  color: red;\n}\n"], dependencies: [{ kind: "directive", type: CdkListbox, selector: "[cdkListbox]", inputs: ["id", "tabindex", "cdkListboxValue", "cdkListboxMultiple", "cdkListboxDisabled", "cdkListboxUseActiveDescendant", "cdkListboxOrientation", "cdkListboxCompareWith", "cdkListboxNavigationWrapDisabled", "cdkListboxNavigatesDisabledOptions"], outputs: ["cdkListboxValueChange"], exportAs: ["cdkListbox"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: CdkOption, selector: "[cdkOption]", inputs: ["id", "cdkOption", "cdkOptionTypeaheadLabel", "cdkOptionDisabled", "tabindex"], exportAs: ["cdkOption"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "pipe", type: JsonPipe, name: "json" }] }); }
}
export { CdkListboxFormsValidationExample };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: CdkListboxFormsValidationExample, decorators: [{
            type: Component,
            args: [{ selector: 'cdk-listbox-forms-validation-example', exportAs: 'cdkListboxFormsValidationExample', standalone: true, imports: [
                        CdkListbox,
                        FormsModule,
                        ReactiveFormsModule,
                        NgFor,
                        CdkOption,
                        NgIf,
                        AsyncPipe,
                        JsonPipe,
                    ], template: "<div class=\"example-listbox-container\" [class.example-listbox-invalid]=\"invalid | async\">\n  <label class=\"example-listbox-label\" id=\"example-zodiac-sign-label\">\n    Zodiac Sign\n  </label>\n  <ul cdkListbox\n      [formControl]=\"signCtrl\"\n      aria-labelledby=\"example-zodiac-sign-label\"\n      class=\"example-listbox\">\n    <li *ngFor=\"let sign of signs\"\n        [cdkOption]=\"sign\"\n        class=\"example-option\">\n      {{sign}}\n    </li>\n  </ul>\n</div>\n<div class=\"example-listbox-errors\" *ngIf=\"invalid | async\">\n  <p *ngFor=\"let error of getErrors()\">{{error}}</p>\n</div>\n<p>\n  Your zodiac sign is: <strong>{{signCtrl.value | json}}</strong>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Cat'])\">Set: Cat</button>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Dragon', 'Snake'])\">Set: Dragon, Snake</button>&nbsp;\n  <button (click)=\"signCtrl.setValue(['Cat', 'Rat'])\">Set: Cat, Rat</button>&nbsp;\n  <button (click)=\"signCtrl.setValue([])\">Clear</button>\n</p>\n", styles: [".example-listbox-container {\n  display: block;\n  width: 250px;\n  border: 1px solid black;\n}\n\n.example-listbox-invalid {\n  border-color: red;\n}\n\n.example-listbox-label {\n  display: block;\n  padding: 5px;\n}\n\n.example-listbox-invalid .example-listbox-label {\n  color: red;\n}\n\n.example-listbox {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  height: 200px;\n  overflow: auto;\n}\n\n.example-option {\n  position: relative;\n  padding: 5px 5px 5px 25px;\n}\n\n.example-option[aria-selected='true']::before {\n  content: '';\n  display: block;\n  width: 20px;\n  height: 20px;\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\"><path d=\"m9.55 18-5.7-5.7 1.425-1.425L9.55 15.15l9.175-9.175L20.15 7.4Z\"/></svg>'); /* stylelint-disable-line */\n  background-size: cover;\n  position: absolute;\n  left: 2px;\n}\n\n.example-option:focus {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.example-listbox-errors {\n  color: red;\n}\n"] }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi1leGFtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMtZXhhbXBsZXMvY2RrL2xpc3Rib3gvY2RrLWxpc3Rib3gtZm9ybXMtdmFsaWRhdGlvbi9jZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uLWV4YW1wbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy1leGFtcGxlcy9jZGsvbGlzdGJveC9jZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uL2Nkay1saXN0Ym94LWZvcm1zLXZhbGlkYXRpb24tZXhhbXBsZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekYsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE9BQU8sRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLHNCQUFzQixDQUFDOzs7QUFFM0QsNENBQTRDO0FBQzVDLE1BaUJhLGdDQUFnQztJQWlCM0M7UUFoQkEsVUFBSyxHQUFHO1lBQ04sS0FBSztZQUNMLElBQUk7WUFDSixPQUFPO1lBQ1AsUUFBUTtZQUNSLFFBQVE7WUFDUixPQUFPO1lBQ1AsT0FBTztZQUNQLE1BQU07WUFDTixRQUFRO1lBQ1IsU0FBUztZQUNULEtBQUs7WUFDTCxLQUFLO1NBQ04sQ0FBQztRQVNGLG9CQUFvQjtRQUNwQixhQUFRLEdBQUcsSUFBSSxXQUFXLENBQVcsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQU41RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDekQsQ0FBQztJQUNKLENBQUM7SUFLRCxTQUFTO1FBQ1AsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxvQ0FBb0MsQ0FBQyxFQUFFO1lBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUNwRDtRQUNELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsa0NBQWtDLENBQUMsRUFBRTtZQUM5RCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN6RixNQUFNLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN2QyxDQUFDOzhHQXZDVSxnQ0FBZ0M7a0dBQWhDLGdDQUFnQyxnSkN6QjdDLDAvQkF5QkEsNmlDRFZJLFVBQVUsOFdBQ1YsV0FBVyxzSUFDWCxtQkFBbUIsa05BQ25CLEtBQUssbUhBQ0wsU0FBUywwS0FDVCxJQUFJLHdGQUNKLFNBQVMseUNBQ1QsUUFBUTs7U0FHQyxnQ0FBZ0M7MkZBQWhDLGdDQUFnQztrQkFqQjVDLFNBQVM7K0JBQ0Usc0NBQXNDLFlBQ3RDLGtDQUFrQyxjQUdoQyxJQUFJLFdBQ1A7d0JBQ1AsVUFBVTt3QkFDVixXQUFXO3dCQUNYLG1CQUFtQjt3QkFDbkIsS0FBSzt3QkFDTCxTQUFTO3dCQUNULElBQUk7d0JBQ0osU0FBUzt3QkFDVCxRQUFRO3FCQUNUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQ29udHJvbCwgVmFsaWRhdG9ycywgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtOZ0ZvciwgTmdJZiwgQXN5bmNQaXBlLCBKc29uUGlwZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2RrTGlzdGJveCwgQ2RrT3B0aW9ufSBmcm9tICdAYW5ndWxhci9jZGsvbGlzdGJveCc7XG5cbi8qKiBAdGl0bGUgTGlzdGJveCB3aXRoIGZvcm1zIHZhbGlkYXRpb24uICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uLWV4YW1wbGUnLFxuICBleHBvcnRBczogJ2Nka0xpc3Rib3hGb3Jtc1ZhbGlkYXRpb25FeGFtcGxlJyxcbiAgdGVtcGxhdGVVcmw6ICdjZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uLWV4YW1wbGUuaHRtbCcsXG4gIHN0eWxlVXJsczogWydjZGstbGlzdGJveC1mb3Jtcy12YWxpZGF0aW9uLWV4YW1wbGUuY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBDZGtMaXN0Ym94LFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTmdGb3IsXG4gICAgQ2RrT3B0aW9uLFxuICAgIE5nSWYsXG4gICAgQXN5bmNQaXBlLFxuICAgIEpzb25QaXBlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDZGtMaXN0Ym94Rm9ybXNWYWxpZGF0aW9uRXhhbXBsZSB7XG4gIHNpZ25zID0gW1xuICAgICdSYXQnLFxuICAgICdPeCcsXG4gICAgJ1RpZ2VyJyxcbiAgICAnUmFiYml0JyxcbiAgICAnRHJhZ29uJyxcbiAgICAnU25ha2UnLFxuICAgICdIb3JzZScsXG4gICAgJ0dvYXQnLFxuICAgICdNb25rZXknLFxuICAgICdSb29zdGVyJyxcbiAgICAnRG9nJyxcbiAgICAnUGlnJyxcbiAgXTtcbiAgaW52YWxpZDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmludmFsaWQgPSB0aGlzLnNpZ25DdHJsLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgbWFwKCgpID0+IHRoaXMuc2lnbkN0cmwudG91Y2hlZCAmJiAhdGhpcy5zaWduQ3RybC52YWxpZCksXG4gICAgKTtcbiAgfVxuXG4gIC8vICNkb2NyZWdpb24gZXJyb3JzXG4gIHNpZ25DdHJsID0gbmV3IEZvcm1Db250cm9sPHN0cmluZ1tdPihbXSwgVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG5cbiAgZ2V0RXJyb3JzKCkge1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGlmICh0aGlzLnNpZ25DdHJsLmhhc0Vycm9yKCdyZXF1aXJlZCcpKSB7XG4gICAgICBlcnJvcnMucHVzaCgnWW91IG11c3QgZW50ZXIgeW91ciB6b2RpYWMgc2lnbicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaWduQ3RybC5oYXNFcnJvcignY2RrTGlzdGJveFVuZXhwZWN0ZWRNdWx0aXBsZVZhbHVlcycpKSB7XG4gICAgICBlcnJvcnMucHVzaCgnWW91IGNhbiBvbmx5IHNlbGVjdCBvbmUgem9kaWFjIHNpZ24nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2lnbkN0cmwuaGFzRXJyb3IoJ2Nka0xpc3Rib3hVbmV4cGVjdGVkT3B0aW9uVmFsdWVzJykpIHtcbiAgICAgIGNvbnN0IGludmFsaWRPcHRpb25zID0gdGhpcy5zaWduQ3RybC5nZXRFcnJvcignY2RrTGlzdGJveFVuZXhwZWN0ZWRPcHRpb25WYWx1ZXMnKS52YWx1ZXM7XG4gICAgICBlcnJvcnMucHVzaChgWW91IGVudGVyZWQgYW4gaW52YWxpZCB6b2RpYWMgc2lnbjogJHtpbnZhbGlkT3B0aW9uc1swXX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycy5sZW5ndGggPyBlcnJvcnMgOiBudWxsO1xuICB9XG4gIC8vICNlbmRkb2NyZWdpb24gZXJyb3JzXG59XG4iLCI8ZGl2IGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94LWNvbnRhaW5lclwiIFtjbGFzcy5leGFtcGxlLWxpc3Rib3gtaW52YWxpZF09XCJpbnZhbGlkIHwgYXN5bmNcIj5cbiAgPGxhYmVsIGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94LWxhYmVsXCIgaWQ9XCJleGFtcGxlLXpvZGlhYy1zaWduLWxhYmVsXCI+XG4gICAgWm9kaWFjIFNpZ25cbiAgPC9sYWJlbD5cbiAgPHVsIGNka0xpc3Rib3hcbiAgICAgIFtmb3JtQ29udHJvbF09XCJzaWduQ3RybFwiXG4gICAgICBhcmlhLWxhYmVsbGVkYnk9XCJleGFtcGxlLXpvZGlhYy1zaWduLWxhYmVsXCJcbiAgICAgIGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94XCI+XG4gICAgPGxpICpuZ0Zvcj1cImxldCBzaWduIG9mIHNpZ25zXCJcbiAgICAgICAgW2Nka09wdGlvbl09XCJzaWduXCJcbiAgICAgICAgY2xhc3M9XCJleGFtcGxlLW9wdGlvblwiPlxuICAgICAge3tzaWdufX1cbiAgICA8L2xpPlxuICA8L3VsPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiZXhhbXBsZS1saXN0Ym94LWVycm9yc1wiICpuZ0lmPVwiaW52YWxpZCB8IGFzeW5jXCI+XG4gIDxwICpuZ0Zvcj1cImxldCBlcnJvciBvZiBnZXRFcnJvcnMoKVwiPnt7ZXJyb3J9fTwvcD5cbjwvZGl2PlxuPHA+XG4gIFlvdXIgem9kaWFjIHNpZ24gaXM6IDxzdHJvbmc+e3tzaWduQ3RybC52YWx1ZSB8IGpzb259fTwvc3Ryb25nPiZuYnNwO1xuICA8YnV0dG9uIChjbGljayk9XCJzaWduQ3RybC5zZXRWYWx1ZShbJ0NhdCddKVwiPlNldDogQ2F0PC9idXR0b24+Jm5ic3A7XG4gIDxidXR0b24gKGNsaWNrKT1cInNpZ25DdHJsLnNldFZhbHVlKFsnRHJhZ29uJywgJ1NuYWtlJ10pXCI+U2V0OiBEcmFnb24sIFNuYWtlPC9idXR0b24+Jm5ic3A7XG4gIDxidXR0b24gKGNsaWNrKT1cInNpZ25DdHJsLnNldFZhbHVlKFsnQ2F0JywgJ1JhdCddKVwiPlNldDogQ2F0LCBSYXQ8L2J1dHRvbj4mbmJzcDtcbiAgPGJ1dHRvbiAoY2xpY2spPVwic2lnbkN0cmwuc2V0VmFsdWUoW10pXCI+Q2xlYXI8L2J1dHRvbj5cbjwvcD5cbiJdfQ==