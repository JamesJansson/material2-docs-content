{"version":3,"file":"tree.mjs","sources":["../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.html","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.ts","../../../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.html","../../../../../../../src/components-examples/cdk/tree/index.ts","../../../../../../../src/components-examples/cdk/tree/tree_public_index.ts"],"sourcesContent":["import {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\n\n\nconst TREE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  }, {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  }, {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  }, {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  }, {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  }\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-example',\n  templateUrl: 'cdk-tree-flat-example.html',\n  styleUrls: ['cdk-tree-flat-example.css'],\n})\nexport class CdkTreeFlatExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n      node => node.level, node => node.expandable);\n\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = TREE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (TREE_DATA[i].level === node.level - 1) {\n        return TREE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 class=\"example-tree-node\">\n    <button mat-icon-button cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            (click)=\"node.isExpanded = !node.isExpanded\"\n            [style.visibility]=\"node.expandable ? 'visible' : 'hidden'\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {Component} from '@angular/core';\nimport {NestedTreeControl} from '@angular/cdk/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussels sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'cdk-tree-nested-example',\n  templateUrl: 'cdk-tree-nested-example.html',\n  styleUrls: ['cdk-tree-nested-example.css'],\n})\nexport class CdkTreeNestedExample {\n  treeControl = new NestedTreeControl<FoodNode> (node => node.children);\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" class=\"example-tree-node\">\n    <button mat-icon-button [attr.aria-label]=\"'Toggle ' + node.name\" cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n    <div [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n  </cdk-nested-tree-node>\n</cdk-tree>\n","import {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {CdkTreeFlatExample} from './cdk-tree-flat/cdk-tree-flat-example';\nimport {CdkTreeNestedExample} from './cdk-tree-nested/cdk-tree-nested-example';\n\nexport {\n  CdkTreeFlatExample,\n  CdkTreeNestedExample,\n};\n\nconst EXAMPLES = [\n  CdkTreeFlatExample,\n  CdkTreeNestedExample,\n];\n\n@NgModule({\n  imports: [\n    CdkTreeModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class CdkTreeExamplesModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["TREE_DATA"],"mappings":"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"}