{"version":3,"file":"input.mjs","sources":["../../../../../../../src/components-examples/material/input/input-clearable/input-clearable-example.ts","../../../../../../../src/components-examples/material/input/input-clearable/input-clearable-example.html","../../../../../../../src/components-examples/material/input/input-error-state-matcher/input-error-state-matcher-example.ts","../../../../../../../src/components-examples/material/input/input-error-state-matcher/input-error-state-matcher-example.html","../../../../../../../src/components-examples/material/input/input-errors/input-errors-example.ts","../../../../../../../src/components-examples/material/input/input-errors/input-errors-example.html","../../../../../../../src/components-examples/material/input/input-form/input-form-example.ts","../../../../../../../src/components-examples/material/input/input-form/input-form-example.html","../../../../../../../src/components-examples/material/input/input-hint/input-hint-example.ts","../../../../../../../src/components-examples/material/input/input-hint/input-hint-example.html","../../../../../../../src/components-examples/material/input/input-overview/input-overview-example.ts","../../../../../../../src/components-examples/material/input/input-overview/input-overview-example.html","../../../../../../../src/components-examples/material/input/input-prefix-suffix/input-prefix-suffix-example.ts","../../../../../../../src/components-examples/material/input/input-prefix-suffix/input-prefix-suffix-example.html","../../../../../../../src/components-examples/material/input/input-harness/input-harness-example.ts","../../../../../../../src/components-examples/material/input/input-harness/input-harness-example.html","../../../../../../../src/components-examples/material/input/index.ts","../../../../../../../src/components-examples/material/input/input_public_index.ts"],"sourcesContent":["import {Component} from '@angular/core';\n\n/**\n * @title Input with a clear button\n */\n@Component({\n  selector: 'input-clearable-example',\n  templateUrl: './input-clearable-example.html',\n  styleUrls: ['./input-clearable-example.css'],\n})\nexport class InputClearableExample {\n  value = 'Clear me';\n}\n","<mat-form-field class=\"example-form-field\" appearance=\"fill\">\n  <mat-label>Clearable input</mat-label>\n  <input matInput type=\"text\" [(ngModel)]=\"value\">\n  <button *ngIf=\"value\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"value=''\">\n    <mat-icon>close</mat-icon>\n  </button>\n</mat-form-field>\n","import {Component} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n/** @title Input with a custom ErrorStateMatcher */\n@Component({\n  selector: 'input-error-state-matcher-example',\n  templateUrl: './input-error-state-matcher-example.html',\n  styleUrls: ['./input-error-state-matcher-example.css'],\n})\nexport class InputErrorStateMatcherExample {\n  emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n\n  matcher = new MyErrorStateMatcher();\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Email</mat-label>\n    <input type=\"email\" matInput [formControl]=\"emailFormControl\" [errorStateMatcher]=\"matcher\"\n           placeholder=\"Ex. pat@example.com\">\n    <mat-hint>Errors appear instantly!</mat-hint>\n    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n      Please enter a valid email address\n    </mat-error>\n    <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n      Email is <strong>required</strong>\n    </mat-error>\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\n/**\n * @title Input with error messages\n */\n@Component({\n  selector: 'input-errors-example',\n  templateUrl: 'input-errors-example.html',\n  styleUrls: ['input-errors-example.css'],\n})\nexport class InputErrorsExample {\n  emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Email</mat-label>\n    <input type=\"email\" matInput [formControl]=\"emailFormControl\" placeholder=\"Ex. pat@example.com\">\n    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n      Please enter a valid email address\n    </mat-error>\n    <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n      Email is <strong>required</strong>\n    </mat-error>\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\n\n/**\n * @title Inputs in a form\n */\n@Component({\n  selector: 'input-form-example',\n  templateUrl: 'input-form-example.html',\n  styleUrls: ['input-form-example.css'],\n})\nexport class InputFormExample {}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Company (disabled)</mat-label>\n    <input matInput disabled value=\"Google\">\n  </mat-form-field>\n\n  <table class=\"example-full-width\" cellspacing=\"0\"><tr>\n    <td><mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>First name</mat-label>\n      <input matInput>\n    </mat-form-field></td>\n    <td><mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Long Last Name That Will Be Truncated</mat-label>\n      <input matInput>\n    </mat-form-field></td>\n  </tr></table>\n\n  <p>\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Address</mat-label>\n      <textarea matInput placeholder=\"Ex. 100 Main St\">1600 Amphitheatre Pkwy</textarea>\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Address 2</mat-label>\n      <textarea matInput></textarea>\n    </mat-form-field>\n  </p>\n\n  <table class=\"example-full-width\" cellspacing=\"0\"><tr>\n    <td><mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>City</mat-label>\n      <input matInput placeholder=\"Ex. San Francisco\">\n    </mat-form-field></td>\n    <td><mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>State</mat-label>\n      <input matInput placeholder=\"Ex. California\">\n    </mat-form-field></td>\n    <td><mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Postal Code</mat-label>\n      <input matInput #postalCode maxlength=\"5\" placeholder=\"Ex. 94105\" value=\"94043\">\n      <mat-hint align=\"end\">{{postalCode.value.length}} / 5</mat-hint>\n    </mat-form-field></td>\n  </tr></table>\n</form>\n","import {Component} from '@angular/core';\n\n/**\n * @title Input with hints\n */\n@Component({\n  selector: 'input-hint-example',\n  templateUrl: 'input-hint-example.html',\n  styleUrls: ['input-hint-example.css'],\n})\nexport class InputHintExample {}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Message</mat-label>\n    <input matInput #message maxlength=\"256\" placeholder=\"Ex. I need help with...\">\n    <mat-hint align=\"start\"><strong>Don't disclose personal info</strong> </mat-hint>\n    <mat-hint align=\"end\">{{message.value.length}} / 256</mat-hint>\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\n\n/**\n * @title Basic Inputs\n */\n@Component({\n  selector: 'input-overview-example',\n  styleUrls: ['input-overview-example.css'],\n  templateUrl: 'input-overview-example.html',\n})\nexport class InputOverviewExample {}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Favorite food</mat-label>\n    <input matInput placeholder=\"Ex. Pizza\" value=\"Sushi\">\n  </mat-form-field>\n\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Leave a comment</mat-label>\n    <textarea matInput placeholder=\"Ex. It makes me feel...\"></textarea>\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\n\n/**\n * @title Inputs with prefixes and suffixes\n */\n@Component({\n  selector: 'input-prefix-suffix-example',\n  templateUrl: 'input-prefix-suffix-example.html',\n  styleUrls: ['input-prefix-suffix-example.css'],\n})\nexport class InputPrefixSuffixExample {}\n","<form class=\"example-form\">\n  <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n    <mat-label>Telephone</mat-label>\n    <span matPrefix>+1 &nbsp;</span>\n    <input type=\"tel\" matInput placeholder=\"555-555-1234\">\n    <mat-icon matSuffix>mode_edit</mat-icon>\n  </mat-form-field>\n</form>\n","import {Component} from '@angular/core';\n\n/**\n * @title Testing with MatInputHarness\n */\n@Component({\n  selector: 'input-harness-example',\n  templateUrl: 'input-harness-example.html',\n})\nexport class InputHarnessExample {\n  inputType = 'number';\n  disabled = false;\n}\n","<mat-form-field appearance=\"fill\">\n  <mat-label>Favorite food</mat-label>\n  <input matInput value=\"Sushi\" name=\"favorite-food\">\n</mat-form-field>\n\n<mat-form-field appearance=\"fill\">\n  <input matInput [type]=\"inputType\"\n         [disabled]=\"disabled\">\n</mat-form-field>\n\n<mat-form-field appearance=\"fill\">\n  <mat-label>Leave a comment</mat-label>\n  <textarea matInput></textarea>\n</mat-form-field>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {InputClearableExample} from './input-clearable/input-clearable-example';\nimport {InputErrorStateMatcherExample} from './input-error-state-matcher/input-error-state-matcher-example';\nimport {InputErrorsExample} from './input-errors/input-errors-example';\nimport {InputFormExample} from './input-form/input-form-example';\nimport {InputHintExample} from './input-hint/input-hint-example';\nimport {InputOverviewExample} from './input-overview/input-overview-example';\nimport {InputPrefixSuffixExample} from './input-prefix-suffix/input-prefix-suffix-example';\nimport {InputHarnessExample} from './input-harness/input-harness-example';\n\nexport {\n  InputClearableExample,\n  InputErrorStateMatcherExample,\n  InputErrorsExample,\n  InputFormExample,\n  InputHarnessExample,\n  InputHintExample,\n  InputOverviewExample,\n  InputPrefixSuffixExample,\n};\n\nconst EXAMPLES = [\n  InputClearableExample,\n  InputErrorStateMatcherExample,\n  InputErrorsExample,\n  InputFormExample,\n  InputHarnessExample,\n  InputHintExample,\n  InputOverviewExample,\n  InputPrefixSuffixExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class InputExamplesModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}