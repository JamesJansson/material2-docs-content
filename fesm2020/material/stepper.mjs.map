{"version":3,"file":"stepper.mjs","sources":["../../../../../../../src/components-examples/material/stepper/stepper-editable/stepper-editable-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-editable/stepper-editable-example.html","../../../../../../../src/components-examples/material/stepper/stepper-errors/stepper-errors-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-errors/stepper-errors-example.html","../../../../../../../src/components-examples/material/stepper/stepper-label-position-bottom/stepper-label-position-bottom-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-label-position-bottom/stepper-label-position-bottom-example.html","../../../../../../../src/components-examples/material/stepper/stepper-optional/stepper-optional-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-optional/stepper-optional-example.html","../../../../../../../src/components-examples/material/stepper/stepper-overview/stepper-overview-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-overview/stepper-overview-example.html","../../../../../../../src/components-examples/material/stepper/stepper-states/stepper-states-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-states/stepper-states-example.html","../../../../../../../src/components-examples/material/stepper/stepper-vertical/stepper-vertical-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-vertical/stepper-vertical-example.html","../../../../../../../src/components-examples/material/stepper/stepper-harness/stepper-harness-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-harness/stepper-harness-example.html","../../../../../../../src/components-examples/material/stepper/stepper-intl/stepper-intl-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-intl/stepper-intl-example.html","../../../../../../../src/components-examples/material/stepper/stepper-lazy-content/stepper-lazy-content-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-lazy-content/stepper-lazy-content-example.html","../../../../../../../src/components-examples/material/stepper/stepper-responsive/stepper-responsive-example.ts","../../../../../../../src/components-examples/material/stepper/stepper-responsive/stepper-responsive-example.html","../../../../../../../src/components-examples/material/stepper/index.ts","../../../../../../../src/components-examples/material/stepper/stepper_public_index.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n/**\n * @title Stepper with editable steps\n */\n@Component({\n  selector: 'stepper-editable-example',\n  templateUrl: 'stepper-editable-example.html',\n  styleUrls: ['stepper-editable-example.css'],\n})\nexport class StepperEditableExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  isEditable = false;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<button mat-raised-button (click)=\"isEditable = !isEditable\">\n  {{!isEditable ? 'Enable edit mode' : 'Disable edit mode'}}\n</button>\n\n<mat-stepper linear #stepper>\n<!-- #docregion editable -->\n  <mat-step [stepControl]=\"firstFormGroup\" [editable]=\"isEditable\">\n<!-- #enddocregion editable -->\n    <form [formGroup]=\"firstFormGroup\">\n<!-- #docregion step-label -->\n      <ng-template matStepLabel>Fill out your name</ng-template>\n<!-- #enddocregion step-label -->\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"firstCtrl\" placeholder=\"Last name, First name\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\" [editable]=\"isEditable\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {STEPPER_GLOBAL_OPTIONS} from '@angular/cdk/stepper';\n\n/**\n * @title Stepper that displays errors in the steps\n */\n@Component({\n  selector: 'stepper-errors-example',\n  templateUrl: 'stepper-errors-example.html',\n  styleUrls: ['stepper-errors-example.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: {showError: true},\n    },\n  ],\n})\nexport class StepperErrorsExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<mat-stepper #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\" errorMessage=\"Name is required.\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <p>Go to a different step to see the error state</p>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\" errorMessage=\"Address is required.\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput placeholder=\"Ex. 1 Main St, New York, NY\" formControlName=\"secondCtrl\"\n               required>\n      </mat-form-field>\n      <div>\n        <p>Go to a different step to see the error state</p>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n/**\n * @title Stepper label bottom position\n */\n@Component({\n  selector: 'stepper-label-position-bottom-example',\n  templateUrl: 'stepper-label-position-bottom-example.html',\n  styleUrls: ['stepper-label-position-bottom-example.css'],\n})\nexport class StepperLabelPositionBottomExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<!-- #docregion label-position -->\n<mat-stepper labelPosition=\"bottom\" #stepper>\n<!-- #enddocregion label-position -->\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\" optional>\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n<!-- #docregion buttons -->\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n<!-- #enddocregion buttons -->\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n/**\n * @title Stepper with optional steps\n */\n@Component({\n  selector: 'stepper-optional-example',\n  templateUrl: 'stepper-optional-example.html',\n  styleUrls: ['stepper-optional-example.css'],\n})\nexport class StepperOptionalExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  isOptional = false;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: '',\n    });\n  }\n}\n","<button mat-raised-button (click)=\"isOptional = !isOptional\">\n  {{!isOptional ? 'Enable optional steps' : 'Disable optional steps'}}\n</button>\n\n<mat-stepper linear #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <!-- #docregion optional -->\n  <mat-step [stepControl]=\"secondFormGroup\" [optional]=\"isOptional\">\n  <!-- #enddocregion optional -->\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n/**\n * @title Stepper overview\n */\n@Component({\n  selector: 'stepper-overview-example',\n  templateUrl: 'stepper-overview-example.html',\n  styleUrls: ['stepper-overview-example.css'],\n})\nexport class StepperOverviewExample implements OnInit {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<button mat-raised-button (click)=\"isLinear = !isLinear\" id=\"toggle-linear\">\n  {{!isLinear ? 'Enable linear mode' : 'Disable linear mode'}}\n</button>\n<mat-stepper [linear]=\"isLinear\" #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <!-- #docregion label -->\n  <mat-step [stepControl]=\"secondFormGroup\" label=\"Fill out your address\">\n  <!-- #enddocregion label -->\n    <form [formGroup]=\"secondFormGroup\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {STEPPER_GLOBAL_OPTIONS} from '@angular/cdk/stepper';\n\n/**\n * @title Stepper with customized states\n */\n@Component({\n  selector: 'stepper-states-example',\n  templateUrl: 'stepper-states-example.html',\n  styleUrls: ['stepper-states-example.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: {displayDefaultIndicatorType: false},\n    },\n  ],\n})\nexport class StepperStatesExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<mat-stepper #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n\n<!-- #docregion states -->\n<mat-stepper>\n<!-- #docregion label -->\n  <mat-step label=\"Step 1\" state=\"phone\">\n    <p>Put down your phones.</p>\n    <div>\n      <button mat-button matStepperNext>Next</button>\n    </div>\n  </mat-step>\n<!-- #enddocregion label -->\n  <mat-step label=\"Step 2\" state=\"chat\">\n    <p>Socialize with each other.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button matStepperNext>Next</button>\n    </div>\n  </mat-step>\n  <mat-step label=\"Step 3\">\n    <p>You're welcome.</p>\n  </mat-step>\n\n  <!-- Icon overrides. -->\n<!-- #docregion override-icons -->\n  <ng-template matStepperIcon=\"phone\">\n    <mat-icon>call_end</mat-icon>\n  </ng-template>\n  <ng-template matStepperIcon=\"chat\">\n    <mat-icon>forum</mat-icon>\n  </ng-template>\n</mat-stepper>\n<!-- #enddocregion override-icons -->\n<!-- #enddocregion states -->\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n/**\n * @title Stepper vertical\n */\n@Component({\n  selector: 'stepper-vertical-example',\n  templateUrl: 'stepper-vertical-example.html',\n  styleUrls: ['stepper-vertical-example.css'],\n})\nexport class StepperVerticalExample implements OnInit {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<button mat-raised-button (click)=\"isLinear = !isLinear\" id=\"toggle-linear\">\n  {{!isLinear ? 'Enable linear mode' : 'Disable linear mode'}}\n</button>\n<mat-stepper orientation=\"vertical\" [linear]=\"isLinear\" #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\">\n    <form [formGroup]=\"secondFormGroup\">\n      <ng-template matStepLabel>Fill out your address</ng-template>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component} from '@angular/core';\n\n/**\n * @title Testing with MatStepperHarness\n */\n@Component({\n  selector: 'stepper-harness-example',\n  templateUrl: 'stepper-harness-example.html',\n})\nexport class StepperHarnessExample {}\n","<mat-stepper>\n  <mat-step>\n    <ng-template matStepLabel>One</ng-template>\n    <button matStepperNext>Next</button>\n  </mat-step>\n  <mat-step optional>\n    <ng-template matStepLabel>Two</ng-template>\n    <button matStepperPrevious>Previous</button>\n    <button matStepperNext>Next</button>\n  </mat-step>\n  <mat-step optional>\n    <ng-template matStepLabel>Three</ng-template>\n    <button matStepperPrevious>Previous</button>\n  </mat-step>\n</mat-stepper>\n","import {Component, Injectable, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {MatStepperIntl} from '@angular/material/stepper';\n\n@Injectable()\nexport class StepperIntl extends MatStepperIntl {\n  // the default optional label text, if unspecified is \"Optional\"\n  override optionalLabel = 'Optional Label';\n}\n\n/**\n * @title Stepper that uses the MatStepperIntl service\n */\n@Component({\n  selector: 'stepper-intl-example',\n  templateUrl: 'stepper-intl-example.html',\n  styleUrls: ['stepper-intl-example.css'],\n  providers: [{provide: MatStepperIntl, useClass: StepperIntl}],\n})\nexport class StepperIntlExample implements OnInit {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  optionalLabelText: string;\n  optionalLabelTextChoices: string[] = ['Option 1', 'Option 2', 'Option 3'];\n\n  constructor(private _formBuilder: FormBuilder, private _matStepperIntl: MatStepperIntl) {}\n\n  updateOptionalLabel() {\n    this._matStepperIntl.optionalLabel = this.optionalLabelText;\n    // Required for the optional label text to be updated\n    // Notifies the MatStepperIntl service that a change has been made\n    this._matStepperIntl.changes.next();\n  }\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required],\n    });\n  }\n}\n","<label for=\"demo-optional-label-group\">Pick the text for the optional label</label>\n<mat-radio-group\n  id=\"demo-optional-label-group\"\n  class=\"demo-radio-group\"\n  [(ngModel)]=\"optionalLabelText\"\n  (ngModelChange)=\"updateOptionalLabel()\">\n  <mat-radio-button\n    class=\"demo-radio-button\"\n    *ngFor=\"let optionalLabelTextChoice of optionalLabelTextChoices\"\n    [value]=\"optionalLabelTextChoice\">\n    {{optionalLabelTextChoice}}\n  </mat-radio-button>\n</mat-radio-group>\n<mat-stepper class=\"demo-stepper\" #stepper>\n  <mat-step [stepControl]=\"firstFormGroup\">\n    <form [formGroup]=\"firstFormGroup\">\n      <ng-template matStepLabel>Fill out your name</ng-template>\n      <mat-form-field class=\"demo-form-field\" appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input\n          matInput\n          placeholder=\"Last name, First name\"\n          formControlName=\"firstCtrl\"\n          required\n        />\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step\n    [stepControl]=\"secondFormGroup\"\n    label=\"Fill out your address\"\n    optional>\n    <form [formGroup]=\"secondFormGroup\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input\n          matInput\n          formControlName=\"secondCtrl\"\n          placeholder=\"Ex. 1 Main St, New York, NY\"\n        />\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button (click)=\"stepper.reset()\">Reset</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {Component} from '@angular/core';\n\n/**\n * @title Stepper lazy content rendering\n */\n@Component({\n  selector: 'stepper-lazy-content-example',\n  templateUrl: 'stepper-lazy-content-example.html',\n  styleUrls: ['stepper-lazy-content-example.css'],\n})\nexport class StepperLazyContentExample {}\n","<mat-stepper orientation=\"vertical\">\n  <mat-step>\n    <ng-template matStepLabel>Step 1</ng-template>\n    <ng-template matStepContent>\n      <p>This content was rendered lazily</p>\n      <button mat-button matStepperNext>Next</button>\n    </ng-template>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Step 2</ng-template>\n    <ng-template matStepContent>\n      <p>This content was also rendered lazily</p>\n      <button mat-button matStepperPrevious>Back</button>\n      <button mat-button matStepperNext>Next</button>\n    </ng-template>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Step 3</ng-template>\n    <p>This content was rendered eagerly</p>\n    <button mat-button matStepperPrevious>Back</button>\n  </mat-step>\n</mat-stepper>\n","import {Component} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {StepperOrientation} from '@angular/material/stepper';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * @title Stepper responsive\n */\n@Component({\n  selector: 'stepper-responsive-example',\n  templateUrl: 'stepper-responsive-example.html',\n  styleUrls: ['stepper-responsive-example.css'],\n})\nexport class StepperResponsiveExample {\n  firstFormGroup = this._formBuilder.group({\n    firstCtrl: ['', Validators.required],\n  });\n  secondFormGroup = this._formBuilder.group({\n    secondCtrl: ['', Validators.required],\n  });\n  thirdFormGroup = this._formBuilder.group({\n    thirdCtrl: ['', Validators.required],\n  });\n  stepperOrientation: Observable<StepperOrientation>;\n\n  constructor(private _formBuilder: FormBuilder, breakpointObserver: BreakpointObserver) {\n    this.stepperOrientation = breakpointObserver\n      .observe('(min-width: 800px)')\n      .pipe(map(({matches}) => (matches ? 'horizontal' : 'vertical')));\n  }\n}\n","<ng-container [ngSwitch]=\"stepperOrientation | async\">\n  <div *ngSwitchCase=\"'horizontal'\">Make your screen smaller to see a vertical stepper</div>\n  <div *ngSwitchCase=\"'vertical'\">Make your screen larger to see a horizontal stepper</div>\n</ng-container>\n\n<mat-stepper\n  class=\"example-stepper\"\n  [orientation]=\"(stepperOrientation | async)!\">\n  <mat-step [stepControl]=\"firstFormGroup\" label=\"Fill out your name\">\n    <form [formGroup]=\"firstFormGroup\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"secondFormGroup\" label=\"Fill out your address\">\n    <form [formGroup]=\"secondFormGroup\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n               required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"thirdFormGroup\" label=\"Fill out your phone number\">\n    <form [formGroup]=\"thirdFormGroup\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Phone number</mat-label>\n        <input matInput formControlName=\"thirdCtrl\" placeholder=\"Ex. 12345678\" required>\n      </mat-form-field>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button matStepperNext>Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <div>\n      <button mat-button matStepperPrevious>Back</button>\n    </div>\n  </mat-step>\n</mat-stepper>\n","import {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {StepperEditableExample} from './stepper-editable/stepper-editable-example';\nimport {StepperErrorsExample} from './stepper-errors/stepper-errors-example';\nimport {StepperLabelPositionBottomExample} from './stepper-label-position-bottom/stepper-label-position-bottom-example';\nimport {StepperOptionalExample} from './stepper-optional/stepper-optional-example';\nimport {StepperOverviewExample} from './stepper-overview/stepper-overview-example';\nimport {StepperStatesExample} from './stepper-states/stepper-states-example';\nimport {StepperVerticalExample} from './stepper-vertical/stepper-vertical-example';\nimport {StepperHarnessExample} from './stepper-harness/stepper-harness-example';\nimport {StepperIntlExample} from './stepper-intl/stepper-intl-example';\nimport {StepperLazyContentExample} from './stepper-lazy-content/stepper-lazy-content-example';\nimport {StepperResponsiveExample} from './stepper-responsive/stepper-responsive-example';\n\nexport {\n  StepperEditableExample,\n  StepperErrorsExample,\n  StepperHarnessExample,\n  StepperIntlExample,\n  StepperLabelPositionBottomExample,\n  StepperOptionalExample,\n  StepperOverviewExample,\n  StepperStatesExample,\n  StepperVerticalExample,\n  StepperLazyContentExample,\n  StepperResponsiveExample,\n};\n\nconst EXAMPLES = [\n  StepperEditableExample,\n  StepperErrorsExample,\n  StepperHarnessExample,\n  StepperIntlExample,\n  StepperLabelPositionBottomExample,\n  StepperOptionalExample,\n  StepperOverviewExample,\n  StepperStatesExample,\n  StepperVerticalExample,\n  StepperLazyContentExample,\n  StepperResponsiveExample,\n];\n\n@NgModule({\n  imports: [\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatRadioModule,\n    MatStepperModule,\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n})\nexport class StepperExamplesModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}